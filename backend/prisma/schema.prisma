// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  username         String            @unique @db.VarChar(64)
  email            String            @unique @db.VarChar(64)
  password         String            @db.VarChar(128)
  isVerified       Boolean           @default(false)
  registeredAt     DateTime          @default(now())
  lastTimeLoggedIn DateTime?
  level            Int               @default(1)
  xp               Int               @default(0)
  roles            Role[]
  verficationCode  VerficationCode[]
  profile          Profile?
}

model Profile {
  id              Int               @id @default(autoincrement())
  fullname        String?           @db.VarChar(64)
  avatarUrl       String?
  bio             String            @default("") @db.VarChar(256)
  location        String?           @db.VarChar(64)
  workplace       String?           @db.VarChar(64)
  education       String?           @db.VarChar(64)
  websiteUrl      String?           @db.VarChar(64)
  followers       UserFollows[]     @relation("following")
  following       UserFollows[]     @relation("follower")
  blockedBy       UserBlocks[]      @relation("blocking")
  blocking        UserBlocks[]      @relation("blockedBy")
  IPAddressRecord IPAddressRecord[]
  SocialAccount   SocialAccount[]
  user            User              @relation(fields: [userId], references: [id])
  userId          Int               @unique
}

enum Role {
  USER
  ADMIN
  MODERATOR
  CREATOR
}

model VerficationCode {
  id               Int      @id @default(autoincrement())
  code             String   @db.Char(6)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  validFrom        DateTime @default(now())
  expiresInMinutes Int      @default(10)
}

model IPAddressRecord {
  ip           String
  lastTimeUsed DateTime?
  user         Profile   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int

  @@id([ip, userId])
}

model SocialAccount {
  url    String
  user   Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@id([url, userId])
}

model UserFollows {
  follower    Profile @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   Profile @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int

  @@id([followerId, followingId])
}

model UserBlocks {
  blockedBy   Profile @relation("blockedBy", fields: [blockedById], references: [id], onDelete: Cascade)
  blockedById Int
  blocking    Profile @relation("blocking", fields: [blockingId], references: [id], onDelete: Cascade)
  blockingId  Int

  @@id([blockedById, blockingId])
}
