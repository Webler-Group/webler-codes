// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               BigInt            @id @default(autoincrement())
  username         String            @unique @db.VarChar(64)
  email            String            @unique @db.VarChar(64)
  password         String            @db.VarChar(128)
  isVerified       Boolean           @default(false)
  registeredAt     DateTime          @default(now())
  lastTimeLoggedIn DateTime?
  level            Int               @default(1)
  xp               Int               @default(0)
  failedLoginCount Int               @default(0)
  roles            Role[]
  verficationCode  VerficationCode[]
  followers        UserFollows[]     @relation("following")
  following        UserFollows[]     @relation("follower")
  blockedBy        UserBlocks[]      @relation("blocking")
  blocking         UserBlocks[]      @relation("blockedBy")
  IPAddressRecord  IPAddressRecord[]
  profile          Profile?
  authoredReports  Report[]          @relation("authoredReports")
  reports          Report[]          @relation("reported")
  assignedReports  Report[]          @relation("assignedReports")
  bans             Ban[]             @relation("banned")
  authoredBans     Ban[]             @relation("authoredBans")
  codes            Code[]
  authoredTags     Tag[]
  posts            Post[]
  discussions      Discussion[]
  feeds            Feed[]
  authoredQuizes   Quiz[]            @relation("authoredQuizes")
  approvedQuizes   Quiz[]            @relation("approvedQuizes")
  quizProgress     QuizProgress[]
}

model Profile {
  id             BigInt          @id @default(autoincrement())
  fullname       String?         @db.VarChar(64)
  avatarUrl      String?
  bio            String          @default("") @db.VarChar(256)
  location       String?         @db.VarChar(64)
  workplace      String?         @db.VarChar(64)
  education      String?         @db.VarChar(64)
  websiteUrl     String?         @db.VarChar(64)
  socialAccounts SocialAccount[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         BigInt          @unique
}

enum Role {
  USER
  ADMIN
  MODERATOR
  CREATOR
}

model VerficationCode {
  id               BigInt   @id @default(autoincrement())
  code             String   @db.Char(6)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           BigInt
  validFrom        DateTime @default(now())
  expiresInMinutes Int      @default(10)
}

model IPAddressRecord {
  ip           String
  lastTimeUsed DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       BigInt

  @@id([ip, userId])
}

model SocialAccount {
  url       String
  user      Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId BigInt

  @@id([url, profileId])
}

model UserFollows {
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  BigInt
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId BigInt

  @@id([followerId, followingId])
}

model UserBlocks {
  blockedBy   User   @relation("blockedBy", fields: [blockedById], references: [id], onDelete: Cascade)
  blockedById BigInt
  blocking    User   @relation("blocking", fields: [blockingId], references: [id], onDelete: Cascade)
  blockingId  BigInt

  @@id([blockedById, blockingId])
}

model Report {
  id             BigInt       @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  message        String?      @db.VarChar(256)
  parent         Report?      @relation("reportRelates", fields: [parentId], references: [id], onDelete: SetNull)
  parentId       BigInt?
  children       Report[]     @relation("reportRelates")
  author         User?        @relation("authoredReports", fields: [authorId], references: [id], onDelete: SetNull)
  authorId       BigInt?
  reportedUser   User         @relation("reported", fields: [reportedUserId], references: [id], onDelete: Cascade)
  reportedUserId BigInt
  type           ReportType
  status         ReportStatus
  reason         ReportReason
  assignee       User?        @relation("assignedReports", fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId     BigInt?
  bans           Ban[]
  note           String?
}

enum ReportStatus {
  OPENED
  CLOSED
}

enum ReportType {
  PROFILE
  CODE
  POST
}

enum ReportReason {
  INAPPROPRIATE_CONTENT
  SPAM
  HARASSMENT
  HATE_SPEECH
  MISINFORMATION
  OTHER
}

model Ban {
  id              BigInt       @id @default(autoincrement())
  reason          ReportReason
  banStart        DateTime     @default(now())
  banEnd          DateTime
  user            User         @relation("banned", fields: [userId], references: [id], onDelete: Cascade)
  userId          BigInt
  author          User?        @relation("authoredBans", fields: [authorId], references: [id], onDelete: SetNull)
  authorId        BigInt?
  relatedReport   Report?      @relation(fields: [relatedReportId], references: [id], onDelete: SetNull)
  relatedReportId BigInt?
  note            String?
}

model Code {
  id           BigInt        @id @default(autoincrement())
  uid          String        @unique @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  isPublic     Boolean       @default(false)
  source       String        @db.VarChar
  title        String        @db.VarChar(64)
  codeLanguage CodeLanguage
  codeVersions CodeVersion[]
  tags         Tag[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       BigInt
  comments     Post[]
}

enum CodeLanguage {
  HTML
  CSS
  JS
  C
  LISP
}

model CodeVersion {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String   @db.VarChar(64)
  source    String
  code      Code     @relation(fields: [codeId], references: [id], onDelete: Cascade)
  codeId    BigInt
}

model CodeTemplate {
  id       BigInt       @id @default(autoincrement())
  language CodeLanguage @unique
  source   String
}

model Tag {
  name       String       @id @db.VarChar(64)
  author     User?        @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId   BigInt?
  codes      Code[]
  discussion Discussion[]
  quizes     Quiz[]
}

model Post {
  id           BigInt      @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  text         String      @db.VarChar(256)
  updatedAt    DateTime?   @updatedAt
  postType     PostType
  isPinned     Boolean?
  isAccepted   Boolean?
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       BigInt
  discussion   Discussion? @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  discussionId BigInt
  code         Code?       @relation(fields: [codeId], references: [id], onDelete: Cascade)
  codeId       BigInt
}

model Discussion {
  id        BigInt    @id @default(autoincrement())
  createdAt DateTime  @default(now())
  text      String    @db.VarChar(1024)
  updatedAt DateTime? @updatedAt
  title     String    @db.VarChar(256)
  tags      Tag[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt
  answers   Post[]
}

model Feed {
  id        BigInt    @id @default(autoincrement())
  createdAt DateTime  @default(now())
  text      String    @db.VarChar(256)
  updatedAt DateTime? @updatedAt
  isPinned  Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt
}

enum PostType {
  COMMENT
  ANSWER
}

enum QuizQuestionType {
  TEXT
  SINGLECHOICE
  MULTICHOICE
  FILL_IN
  ORDERING
  MATCHING
}

enum QuizStatus {
  DRAFT
  APPROVED
  REJECTED
  WAITING_FOR_APPROVAL
  ASSIGNED
}

model Quiz {
  id           BigInt         @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  title        String         @db.VarChar(64)
  xp           Int
  status       QuizStatus     @default(DRAFT)
  tags         Tag[]
  author       User?          @relation("authoredQuizes", fields: [authorId], references: [id], onDelete: SetNull)
  authorId     BigInt?
  approvedBy   User?          @relation("approvedQuizes", fields: [approvedById], references: [id], onDelete: SetNull)
  approvedById BigInt?
  questions    QuizQuestion[]
  quizPorgress QuizProgress[]
}

model QuizQuestion {
  id              BigInt               @id @default(autoincrement())
  quiz            Quiz                 @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId          BigInt
  type            QuizQuestionType
  correctAnswer   String?              @db.VarChar(64)
  text            String?              @db.VarChar(256)
  options         QuizOption[]
  questionResults QuizQuestionResult[]
}

model QuizOption {
  id            BigInt       @id @default(autoincrement())
  question      QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    BigInt
  correctAnswer String?      @db.VarChar(64)
  text          String?      @db.VarChar(256)
  isCorrect     Boolean?
  correctIndex  Int?
  answers       QuizAnswer[]
}

model QuizProgress {
  user                     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   BigInt
  quiz                     Quiz                 @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId                   BigInt
  currentQuestionNumber    Int                  @default(1)
  currentQuestionStartTime DateTime
  isCompleted              Boolean              @default(false)
  xpEarned                 Int                  @default(0)
  questionResults          QuizQuestionResult[]

  @@id([userId, quizId])
}

model QuizQuestionResult {
  progress       QuizProgress @relation(fields: [userId, quizId], references: [userId, quizId], onDelete: Cascade)
  userId         BigInt
  quizId         BigInt
  question       QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId     BigInt
  answer         String?      @db.VarChar(64)
  answerTime     DateTime?
  isAnswered     Boolean      @default(false)
  isCorrect      Boolean      @default(false)
  questionNumber Int
  startTime      DateTime?
  answers        QuizAnswer[]

  @@id([userId, quizId, questionId])
}

model QuizAnswer {
  questionResult QuizQuestionResult @relation(fields: [userId, quizId, questionId], references: [userId, quizId, questionId], onDelete: Cascade)
  userId         BigInt
  quizId         BigInt
  questionId     BigInt
  option         QuizOption         @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId       BigInt
  answer         String?            @db.VarChar(64)
  selected       Boolean?
  index          Int?

  @@id([userId, quizId, questionId, optionId])
}
