// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               BigInt            @id @default(autoincrement())
  username         String            @unique @db.VarChar(64)
  email            String            @unique @db.VarChar(64)
  password         String            @db.VarChar(128)
  isVerified       Boolean           @default(false)
  registeredAt     DateTime          @default(now())
  lastTimeLoggedIn DateTime?
  level            Int               @default(1)
  xp               Int               @default(0)
  failedLoginCount Int               @default(0)
  roles            Role[]
  verficationCode  VerficationCode[]
  followers        UserFollows[]     @relation("following")
  following        UserFollows[]     @relation("follower")
  blockedBy        UserBlocks[]      @relation("blocking")
  blocking         UserBlocks[]      @relation("blockedBy")
  IPAddressRecord  IPAddressRecord[]
  profile          Profile?
  authoredReports  Report[]          @relation("authoredReports")
  reports          Report[]          @relation("reported")
  assignedReports  Report[]          @relation("assignedReports")
  bans             Ban[]             @relation("banned")
  authoredBans     Ban[]             @relation("authoredBans")
}

model Profile {
  id            BigInt          @id @default(autoincrement())
  fullname      String?         @db.VarChar(64)
  avatarUrl     String?
  bio           String          @default("") @db.VarChar(256)
  location      String?         @db.VarChar(64)
  workplace     String?         @db.VarChar(64)
  education     String?         @db.VarChar(64)
  websiteUrl    String?         @db.VarChar(64)
  SocialAccount SocialAccount[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        BigInt          @unique
}

enum Role {
  USER
  ADMIN
  MODERATOR
  CREATOR
}

model VerficationCode {
  id               BigInt   @id @default(autoincrement())
  code             String   @db.Char(6)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           BigInt
  validFrom        DateTime @default(now())
  expiresInMinutes Int      @default(10)
}

model IPAddressRecord {
  ip           String
  lastTimeUsed DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       BigInt

  @@id([ip, userId])
}

model SocialAccount {
  url       String
  user      Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId BigInt

  @@id([url, profileId])
}

model UserFollows {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  BigInt
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId BigInt

  @@id([followerId, followingId])
}

model UserBlocks {
  blockedBy   User   @relation("blockedBy", fields: [blockedById], references: [id], onDelete: Cascade)
  blockedById BigInt
  blocking    User   @relation("blocking", fields: [blockingId], references: [id], onDelete: Cascade)
  blockingId  BigInt

  @@id([blockedById, blockingId])
}

model Report {
  id             BigInt       @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  message        String?      @db.VarChar(256)
  parent         Report?      @relation("reportRelates", fields: [parentId], references: [id])
  parentId       BigInt?
  children       Report[]     @relation("reportRelates")
  author         User         @relation("authoredReports", fields: [authorId], references: [id])
  authorId       BigInt
  reportedUser   User?        @relation("reported", fields: [reportedUserId], references: [id])
  reportedUserId BigInt
  type           ReportType
  status         ReportStatus
  reason         ReportReason
  assignee       User?        @relation("assignedReports", fields: [assigneeId], references: [id])
  assigneeId     BigInt?
  ban            Ban?         @relation(fields: [banId], references: [id])
  banId          BigInt?      @unique
}

enum ReportStatus {
  OPENED
  CLOSED
}

enum ReportType {
  USER
  CODE
  POST
}

enum ReportReason {
  INAPPROPRIATE_CONTENT
  SPAM
  HARASSMENT
  HATE_SPEECH
  MISINFORMATION
  OTHER
}

model Ban {
  id            BigInt       @id @default(autoincrement())
  reason        ReportReason
  banStart      DateTime     @default(now())
  banEnd        DateTime
  user          User         @relation("banned", fields: [userId], references: [id])
  userId        BigInt
  author        User         @relation("authoredBans", fields: [authorId], references: [id])
  authorId      BigInt
  relatedReport Report?
}
